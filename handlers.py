from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import MenuState
from gptcontact import get_task
from callbacks import TasksCallbackFactory, ThemeCallbackFactory
import requests
import asyncio
import kb
router = Router()


#starter
@router.message(Command("start"))
async def start_handler(msg: Message, state : FSMContext):
    await state.clear()
    await msg.answer('–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, –Ω–æ —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é:', reply_markup=kb.problem_menu)
    await state.set_state(MenuState.isgenerated)


@router.message(MenuState.isgenerated)
async def isgenerated_handler(msg: Message, state : FSMContext):
    if msg.text == "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É":
        await state.update_data(isgenerated=True)
    elif msg.text == "üìÅ –í–∑—è—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –∞—Ä—Ö–∏–≤–∞":
        await state.update_data(isgenerated=False)
    await msg.answer(f'üß† –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —É —Ç–µ–±—è –≤ python?', reply_markup=kb.level_menu)
    await state.set_state(MenuState.level)


@router.message(MenuState.level)
async def level_handler(msg: Message, state : FSMContext):
    is_continue = True
    if msg.text == "üî∞ Just started":
        await state.update_data(level=1)
        is_continue = False

    elif msg.text == "üìï Junior":
        await state.update_data(level=2)
        await state.update_data(theme=[])

    elif msg.text == "üëî Middle":
        await state.update_data(level=3)
        await state.update_data(theme=[])

    elif msg.text == "üé© Senior":
        await state.update_data(level=4)
        await state.update_data(theme=[])

    elif msg.text == "üîô":
        await start_handler(msg, state)

    data = await state.get_data()
    print(data, is_continue)
    if data and is_continue:
        level = data.get("level")
        await msg.answer(get_task(level), reply_markup=kb.problem_nav())
    else:
        await theme_handler(msg, state)

@router.message(MenuState.theme)
async def theme_handler(msg: Message, state : FSMContext):
    await msg.answer(f'üß† –í—ã–±–µ—Ä–∏ —Ç–µ–º—É?', reply_markup=kb.theme_menu())
    
    
@router.callback_query(TasksCallbackFactory.filter(F.action == "next"))
async def next_task(query: types.CallbackQuery, callback_data: TasksCallbackFactory, state: FSMContext):
    data = await state.get_data()
    level = data.get("level")
    await query.message.edit_text(get_task(level), reply_markup=kb.problem_nav())

@router.callback_query(TasksCallbackFactory.filter(F.action == "stop"))
async def next_task(query: types.CallbackQuery, callback_data: TasksCallbackFactory, state: FSMContext):
    await start_handler(query.message, state)